{
	"info": {
		"_postman_id": "64d53001-a74b-4f0b-aeb4-ebce8c577f80",
		"name": "Integrity_Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6957633"
	},
	"item": [
		{
			"name": "crear usuario 1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Función para generar un nombre de usuario aleatorio\r",
							"function generateUsername() {\r",
							"    const names = [\"carlos\", \"pedro\", \"juan\", \"felipe\", \"john\", \"arturo\", \"maria\", \"andrea\", \"claudia\", \"ana\", \"laura\", \"luisa\"];\r",
							"    const lastnames = [\"sanchez\", \"rodriguez\", \"hernandez\", \"perez\", \"flores\",\"jimenez\", \"quesada\", \"libreros\", \"arbelaez\", \"cifuentes\",\"pelaez\"];\r",
							"    const randomIndex1 = Math.floor(Math.random() * names.length);\r",
							"    const randomIndex2 = Math.floor(Math.random() * lastnames.length);\r",
							"    let username = names[randomIndex1]+lastnames[randomIndex2]+Math.floor(Math.random() * 100);\r",
							"    return username;\r",
							"}\r",
							"\r",
							"// Función para generar una contraseña aleatoria\r",
							"function generatePassword() {\r",
							"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
							"    let password = \"\";\r",
							"    for (let i = 0; i < 8; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
							"        password += characters.charAt(randomIndex);\r",
							"    }\r",
							"    return password;\r",
							"}\r",
							"\r",
							"// Generar dos nombres de usuario y contraseñas\r",
							"const username1 = generateUsername();\r",
							"const password1 = generatePassword();\r",
							"\r",
							"// Guardar los valores en variables de entorno para su uso en la solicitud\r",
							"pm.environment.set(\"username1\", username1);\r",
							"pm.environment.set(\"password1\", password1);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"{{username1}}\", \"password\": \"{{password1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "crear usuario 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Función para generar un nombre de usuario aleatorio\r",
							"function generateUsername() {\r",
							"    const names = [\"carlos\", \"pedro\", \"juan\", \"felipe\", \"john\", \"arturo\", \"maria\", \"andrea\", \"claudia\", \"ana\", \"laura\", \"luisa\"];\r",
							"    const lastnames = [\"sanchez\", \"rodriguez\", \"hernandez\", \"perez\", \"flores\",\"jimenez\", \"quesada\", \"libreros\", \"arbelaez\", \"cifuentes\",\"pelaez\"];\r",
							"    const randomIndex1 = Math.floor(Math.random() * names.length);\r",
							"    const randomIndex2 = Math.floor(Math.random() * lastnames.length);\r",
							"    let username = names[randomIndex1]+lastnames[randomIndex2]+Math.floor(Math.random() * 100);\r",
							"    return username;\r",
							"}\r",
							"\r",
							"// Función para generar una contraseña aleatoria\r",
							"function generatePassword() {\r",
							"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
							"    let password = \"\";\r",
							"    for (let i = 0; i < 8; i++) {\r",
							"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
							"        password += characters.charAt(randomIndex);\r",
							"    }\r",
							"    return password;\r",
							"}\r",
							"\r",
							"// Generar dos nombres de usuario y contraseñas\r",
							"const username2 = generateUsername();\r",
							"const password2 = generatePassword();\r",
							"\r",
							"// Guardar los valores en variables de entorno para su uso en la solicitud\r",
							"pm.environment.set(\"username2\", username2);\r",
							"pm.environment.set(\"password2\", password2);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"{{username2}}\", \"password\": \"{{password2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "login usuario 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"authToken\", jsonData.access_token);",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - access_token\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.access_token).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n{\"username\": \"{{username1}}\", \"password\": \"{{password1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login usuario 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"authToken2\", jsonData.access_token);",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - access_token\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.access_token).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"{{username2}}\", \"password\": \"{{password2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "leer perfil usuario 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.public_key).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.username).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"public_key is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.public_key).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Username is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is in an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/profile",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "leer perfil usuario 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.public_key).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.username).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"public_key is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.public_key).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Username is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is in an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/profile",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "listar posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response body is an array\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Response body has at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Validate required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(function (post) {",
							"        pm.expect(post).to.have.property('id').that.is.a('number');",
							"        pm.expect(post).to.have.property('title').that.is.a('string');",
							"        pm.expect(post).to.have.property('content').that.is.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate that the content field is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(post) {",
							"        pm.expect(post.content).to.exist.and.to.not.be.empty;",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "crear un post usuario 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the request body is not empty\", function () {",
							"    const requestBody = pm.request.body.raw;",
							"    ",
							"    pm.expect(requestBody).to.exist.and.to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"title\": \"Hello Alvaro\", \"content\": \"Este contenido es inalterable\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/post",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "crear un post usuario 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the request body is not empty\", function () {",
							"    const requestBody = pm.request.body.raw;",
							"    ",
							"    pm.expect(requestBody).to.exist.and.to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"title\": \"Hello Alvaro\", \"content\": \"Este contenido es inalterable\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/post",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Leer un post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields - content, id, and title\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.content).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.title).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"id is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.id).to.be.a('number');",
							"  pm.expect(responseData.id).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Title is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/post/5",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"post",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "modificar post usuario 1 en post propio",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify the message is the expected value\", function () {",
							"    const expectedMessage = \"expected value\";",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.message).to.equal(expectedMessage);",
							"});",
							"",
							"",
							"pm.test(\"Response time is in acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"title\": \"Hello Danny\", \"content\": \"Este contenido esta protegido HACKED\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/post/5",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"post",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "modificar post usuario 1 en post ajeno",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify the message is the expected value\", function () {",
							"    const expectedMessage = \"expected value\";",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.message).to.equal(expectedMessage);",
							"});",
							"",
							"",
							"pm.test(\"Response time is in acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"title\": \"Hello Danny\", \"content\": \"Este contenido esta protegido HACKED\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/post/5",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"post",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "modificar post usuario 2 en post propio",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify the message is the expected value\", function () {",
							"    const expectedMessage = \"expected value\";",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.message).to.equal(expectedMessage);",
							"});",
							"",
							"",
							"pm.test(\"Response time is in acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"title\": \"Hello Danny\", \"content\": \"Este contenido esta protegido HACKED\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/post/7",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"post",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "modificar post usuario 2 en post ajeno",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify the message is the expected value\", function () {",
							"    const expectedMessage = \"expected value\";",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.message).to.equal(expectedMessage);",
							"});",
							"",
							"",
							"pm.test(\"Response time is in acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"title\": \"Hello Danny\", \"content\": \"Este contenido esta protegido HACKED\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/post/7",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"post",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "modificar post malicioso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Message field is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Message field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"title\": \"Pobre Danny\", \"content\": \"hacked\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/unsec-post/7",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"unsec-post",
						"7"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "namesList",
			"value": "https://gist.githubusercontent.com/alvaro-salazar/3d4be7ddd1fc3123de7de672f6911d86/raw/ea6f67b30e1eca65fe7ded0d8106edbb584fb614/nombre-apellidos.json",
			"type": "string"
		},
		{
			"key": "lastnamesList",
			"value": "https://gist.githubusercontent.com/alvaro-salazar/3d4be7ddd1fc3123de7de672f6911d86/raw/ea6f67b30e1eca65fe7ded0d8106edbb584fb614/nombre-apellidos.json",
			"type": "string"
		}
	]
}